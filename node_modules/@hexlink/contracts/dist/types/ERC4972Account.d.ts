import { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface ERC4972AccountInterface extends utils.Interface {
    contractName: "ERC4972Account";
    functions: {
        "getERC4972Registry()": FunctionFragment;
        "getName()": FunctionFragment;
        "getNameOwner()": FunctionFragment;
        "setName(bytes32)": FunctionFragment;
        "setNameOwner()": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "getERC4972Registry", values?: undefined): string;
    encodeFunctionData(functionFragment: "getName", values?: undefined): string;
    encodeFunctionData(functionFragment: "getNameOwner", values?: undefined): string;
    encodeFunctionData(functionFragment: "setName", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "setNameOwner", values?: undefined): string;
    decodeFunctionResult(functionFragment: "getERC4972Registry", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getNameOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setNameOwner", data: BytesLike): Result;
    events: {
        "NameOwnerUpdated(address)": EventFragment;
        "NameUpdated(bytes32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "NameOwnerUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NameUpdated"): EventFragment;
}
export type NameOwnerUpdatedEvent = TypedEvent<[string], {
    arg0: string;
}>;
export type NameOwnerUpdatedEventFilter = TypedEventFilter<NameOwnerUpdatedEvent>;
export type NameUpdatedEvent = TypedEvent<[string], {
    name: string;
}>;
export type NameUpdatedEventFilter = TypedEventFilter<NameUpdatedEvent>;
export interface ERC4972Account extends BaseContract {
    contractName: "ERC4972Account";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ERC4972AccountInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getERC4972Registry(overrides?: CallOverrides): Promise<[string]>;
        getName(overrides?: CallOverrides): Promise<[string]>;
        getNameOwner(overrides?: CallOverrides): Promise<[string]>;
        setName(name: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setNameOwner(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    getERC4972Registry(overrides?: CallOverrides): Promise<string>;
    getName(overrides?: CallOverrides): Promise<string>;
    getNameOwner(overrides?: CallOverrides): Promise<string>;
    setName(name: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setNameOwner(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        getERC4972Registry(overrides?: CallOverrides): Promise<string>;
        getName(overrides?: CallOverrides): Promise<string>;
        getNameOwner(overrides?: CallOverrides): Promise<string>;
        setName(name: BytesLike, overrides?: CallOverrides): Promise<void>;
        setNameOwner(overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "NameOwnerUpdated(address)"(arg0?: string | null): NameOwnerUpdatedEventFilter;
        NameOwnerUpdated(arg0?: string | null): NameOwnerUpdatedEventFilter;
        "NameUpdated(bytes32)"(name?: BytesLike | null): NameUpdatedEventFilter;
        NameUpdated(name?: BytesLike | null): NameUpdatedEventFilter;
    };
    estimateGas: {
        getERC4972Registry(overrides?: CallOverrides): Promise<BigNumber>;
        getName(overrides?: CallOverrides): Promise<BigNumber>;
        getNameOwner(overrides?: CallOverrides): Promise<BigNumber>;
        setName(name: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setNameOwner(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        getERC4972Registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getNameOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setName(name: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setNameOwner(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
