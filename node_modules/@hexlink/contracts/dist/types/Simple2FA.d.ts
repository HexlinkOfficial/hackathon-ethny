import { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface Simple2FAInterface extends utils.Interface {
    contractName: "Simple2FA";
    functions: {
        "addSecondFactor(address)": FunctionFragment;
        "getSecondFactor()": FunctionFragment;
        "removeSecondFactor(address)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "addSecondFactor", values: [string]): string;
    encodeFunctionData(functionFragment: "getSecondFactor", values?: undefined): string;
    encodeFunctionData(functionFragment: "removeSecondFactor", values: [string]): string;
    decodeFunctionResult(functionFragment: "addSecondFactor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSecondFactor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeSecondFactor", data: BytesLike): Result;
    events: {
        "SecondFactorAdded(address)": EventFragment;
        "SecondFactorRemoved(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "SecondFactorAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SecondFactorRemoved"): EventFragment;
}
export type SecondFactorAddedEvent = TypedEvent<[string], {
    arg0: string;
}>;
export type SecondFactorAddedEventFilter = TypedEventFilter<SecondFactorAddedEvent>;
export type SecondFactorRemovedEvent = TypedEvent<[string], {
    arg0: string;
}>;
export type SecondFactorRemovedEventFilter = TypedEventFilter<SecondFactorRemovedEvent>;
export interface Simple2FA extends BaseContract {
    contractName: "Simple2FA";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: Simple2FAInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addSecondFactor(factor: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        getSecondFactor(overrides?: CallOverrides): Promise<[string]>;
        removeSecondFactor(factor: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    addSecondFactor(factor: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    getSecondFactor(overrides?: CallOverrides): Promise<string>;
    removeSecondFactor(factor: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        addSecondFactor(factor: string, overrides?: CallOverrides): Promise<void>;
        getSecondFactor(overrides?: CallOverrides): Promise<string>;
        removeSecondFactor(factor: string, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "SecondFactorAdded(address)"(arg0?: string | null): SecondFactorAddedEventFilter;
        SecondFactorAdded(arg0?: string | null): SecondFactorAddedEventFilter;
        "SecondFactorRemoved(address)"(arg0?: string | null): SecondFactorRemovedEventFilter;
        SecondFactorRemoved(arg0?: string | null): SecondFactorRemovedEventFilter;
    };
    estimateGas: {
        addSecondFactor(factor: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        getSecondFactor(overrides?: CallOverrides): Promise<BigNumber>;
        removeSecondFactor(factor: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        addSecondFactor(factor: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        getSecondFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        removeSecondFactor(factor: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
