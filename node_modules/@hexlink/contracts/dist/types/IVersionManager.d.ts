import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface IVersionManagerInterface extends utils.Interface {
    contractName: "IVersionManager";
    functions: {
        "getImplementation(uint256)": FunctionFragment;
        "getImplementations(uint256,uint256)": FunctionFragment;
        "getLatestVersion()": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "getImplementation", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getImplementations", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getLatestVersion", values?: undefined): string;
    decodeFunctionResult(functionFragment: "getImplementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getImplementations", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getLatestVersion", data: BytesLike): Result;
    events: {};
}
export interface IVersionManager extends BaseContract {
    contractName: "IVersionManager";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IVersionManagerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getImplementation(version: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        getImplementations(start: BigNumberish, end: BigNumberish, overrides?: CallOverrides): Promise<[string[]]>;
        getLatestVersion(overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    getImplementation(version: BigNumberish, overrides?: CallOverrides): Promise<string>;
    getImplementations(start: BigNumberish, end: BigNumberish, overrides?: CallOverrides): Promise<string[]>;
    getLatestVersion(overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        getImplementation(version: BigNumberish, overrides?: CallOverrides): Promise<string>;
        getImplementations(start: BigNumberish, end: BigNumberish, overrides?: CallOverrides): Promise<string[]>;
        getLatestVersion(overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        getImplementation(version: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getImplementations(start: BigNumberish, end: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getLatestVersion(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        getImplementation(version: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getImplementations(start: BigNumberish, end: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getLatestVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
